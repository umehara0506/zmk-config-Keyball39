#define DEFAULT 0
#define NUM     2
#define SYM     3
#define FUN     4
#define MOUSE   1
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Spotlight: Spotlight {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LEFT_COMMAND &kp SPACE>;

            label = "SPOTLIGHT";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q          &kp W             &kp E             &kp R             &kp T                                         &kp Y        &kp U  &kp I      &kp O                &lt 5 P
&kp A          &kp S             &kp D             &kp F             &kp G                                         &kp H        &kp J  &kp K      &kp L                &kp MINUS
&mt LSHIFT Z   &kp X             &kp C             &kp V             &kp B                                         &kp N        &kp M  &kp COMMA  &mt RIGHT_SHIFT DOT  &mt RSHIFT QUESTION
&mt LCTRL ESC  &mt LEFT_ALT TAB  &kp LEFT_COMMAND  &lt 3 LANGUAGE_2  &lt 1 SPACE  &lt 2 LANGUAGE_1  &kp BACKSPACE  &lt 1 ENTER                                         &lt 4 DELETE
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp LEFT_SHIFT        &kp PLUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3                  &kp LG(W)      &kp LG(R)           &kp LS(LC(TAB))  &kp LC(TAB)      &kp K_SCROLL_UP
&kp LG(LS(NUMBER_4))  &kp MINUS     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6                  &kp LG(T)      &kp LG(LEFT_ARROW)  &kp UP_ARROW     &kp LG(RIGHT)    &kp K_SCROLL_DOWN
&kp LG(LS(N5))        &kp ASTERISK  &kp N7        &kp NUMBER_8  &kp NUMBER_9                  &kp LG(LA(T))  &kp LEFT_ARROW      &kp DOWN_ARROW   &kp RIGHT_ARROW  &msc SCRL_UP
&kp LG(LS(NUMBER_4))  &kp SLASH     &kp NUMBER_0  &trans        &trans        &trans  &trans  &trans                                                               &msc SCRL_DOWN
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp ASTERISK     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET                  &kp SEMICOLON  &kp COLON  &none              &kp INT_YEN       &kp PIPE
&none            &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN     &kp GREATER_THAN                   &kp CARET      &kp EQUAL  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp GRAVE
&kp EXCLAMATION  &kp QUESTION          &kp DOLLAR             &kp PERCENT       &kp AMPERSAND                      &kp HASH       &kp PLUS   &kp SLASH          &kp UNDERSCORE    &kp NON_US_BACKSLASH
&kp LCTRL        &kp LEFT_ALT          &kp LEFT_COMMAND       &trans            &trans             &trans  &trans  &trans                                                         &kp AT_SIGN
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &none                   &none          &none               &none               &none          &none
&kp F5  &kp F6   &kp F7   &kp F8   &none                   &kp LG(SPACE)  &none               &kp LC(UP_ARROW)    &none          &none
&kp F9  &kp F10  &kp F11  &kp F12  &none                   &none          &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(RIGHT)  &none
&trans  &trans   &trans   &trans   &trans  &trans  &trans  &trans                                                                &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &trans          &trans          &trans           &trans                        &trans  &trans     &trans     &trans  &trans
&trans  &none           &kp UP_ARROW    &trans           &msc SCRL_UP                  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &msc SCRL_DOWN                &trans  &trans     &trans     &trans  &trans
&trans  &trans          &trans          &none            &none           &none  &none  &none                                 &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&bt BT_CLR_ALL  &trans          &trans          &trans           &trans                                    &trans        &trans  &trans          &trans  &trans
&trans          &trans          &msc SCRL_UP    &trans           &none                                     &trans        &trans  &msc SCRL_UP    &trans  &trans
&trans          &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans                                    &trans        &trans  &msc SCRL_DOWN  &trans  &trans
&bt BT_CLR      &trans          &trans          &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                  &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };
    };
};
